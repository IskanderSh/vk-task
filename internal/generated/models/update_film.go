// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateFilm update film
//
// swagger:model UpdateFilm
type UpdateFilm struct {

	// actors
	Actors []string `json:"actors"`

	// date
	// Format: date
	Date strfmt.Date `json:"date,omitempty"`

	// description
	// Max Length: 1000
	Description string `json:"description,omitempty"`

	// name
	// Max Length: 150
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// rating
	// Maximum: 10
	// Minimum: 0
	Rating *int64 `json:"rating,omitempty"`
}

// Validate validates this update film
func (m *UpdateFilm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRating(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateFilm) validateDate(formats strfmt.Registry) error {
	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateFilm) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", m.Description, 1000); err != nil {
		return err
	}

	return nil
}

func (m *UpdateFilm) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 150); err != nil {
		return err
	}

	return nil
}

func (m *UpdateFilm) validateRating(formats strfmt.Registry) error {
	if swag.IsZero(m.Rating) { // not required
		return nil
	}

	if err := validate.MinimumInt("rating", "body", *m.Rating, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("rating", "body", *m.Rating, 10, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update film based on context it is used
func (m *UpdateFilm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateFilm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateFilm) UnmarshalBinary(b []byte) error {
	var res UpdateFilm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
