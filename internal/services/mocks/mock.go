// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers/handler.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	models "github.com/IskanderSh/vk-task/internal/generated/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserProvider is a mock of UserProvider interface.
type MockUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserProviderMockRecorder
}

// MockUserProviderMockRecorder is the mock recorder for MockUserProvider.
type MockUserProviderMockRecorder struct {
	mock *MockUserProvider
}

// NewMockUserProvider creates a new mock instance.
func NewMockUserProvider(ctrl *gomock.Controller) *MockUserProvider {
	mock := &MockUserProvider{ctrl: ctrl}
	mock.recorder = &MockUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProvider) EXPECT() *MockUserProviderMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserProvider) AddUser(ctx context.Context, input *models.UserSignUp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserProviderMockRecorder) AddUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserProvider)(nil).AddUser), ctx, input)
}

// Login mocks base method.
func (m *MockUserProvider) Login(ctx context.Context, input *models.UserSignIn) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserProviderMockRecorder) Login(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserProvider)(nil).Login), ctx, input)
}

// MockActorProvider is a mock of ActorProvider interface.
type MockActorProvider struct {
	ctrl     *gomock.Controller
	recorder *MockActorProviderMockRecorder
}

// MockActorProviderMockRecorder is the mock recorder for MockActorProvider.
type MockActorProviderMockRecorder struct {
	mock *MockActorProvider
}

// NewMockActorProvider creates a new mock instance.
func NewMockActorProvider(ctrl *gomock.Controller) *MockActorProvider {
	mock := &MockActorProvider{ctrl: ctrl}
	mock.recorder = &MockActorProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorProvider) EXPECT() *MockActorProviderMockRecorder {
	return m.recorder
}

// AddActor mocks base method.
func (m *MockActorProvider) AddActor(ctx context.Context, actor *models.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActor", ctx, actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddActor indicates an expected call of AddActor.
func (mr *MockActorProviderMockRecorder) AddActor(ctx, actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActor", reflect.TypeOf((*MockActorProvider)(nil).AddActor), ctx, actor)
}

// MockFilmProvider is a mock of FilmProvider interface.
type MockFilmProvider struct {
	ctrl     *gomock.Controller
	recorder *MockFilmProviderMockRecorder
}

// MockFilmProviderMockRecorder is the mock recorder for MockFilmProvider.
type MockFilmProviderMockRecorder struct {
	mock *MockFilmProvider
}

// NewMockFilmProvider creates a new mock instance.
func NewMockFilmProvider(ctrl *gomock.Controller) *MockFilmProvider {
	mock := &MockFilmProvider{ctrl: ctrl}
	mock.recorder = &MockFilmProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmProvider) EXPECT() *MockFilmProviderMockRecorder {
	return m.recorder
}
